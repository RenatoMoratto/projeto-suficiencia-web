version: "3.0"

services:
    mongodb:
        container_name: mongodb
        image: mongo:5.0.2
        restart: on-failure
        env_file: ./.env
        environment:
            - MONGO_INITDB_ROOT_USERNAME=$DB_ROOT_USER
            - MONGO_INITDB_ROOT_PASSWORD=$DB_ROOT_PASS
            - MONGO_INITDB_DB_NAME=$DB_NAME
        ports:
            - $DB_LOCAL_PORT:$DB_DOCKER_PORT
        volumes:
            - ./mongo-init-scripts:/docker-entrypoint-initdb.d/
            - db:/data/db
        networks:
            - backend

    user-cache:
        container_name: user-cache
        image: redis:6.2-alpine
        restart: always
        env_file: ./.env
        ports:
            - $REDIS_PORT:$REDIS_PORT
        volumes:
            - cache:/data
        networks:
            - backend

    rabbitmq:
        container_name: rabbitmq
        image: rabbitmq:3.11-management
        restart: on-failure
        env_file: ./.env
        environment:
            - RABBITMQ_DEFAULT_USER=$MQ_USER
            - RABBITMQ_DEFAULT_PASS=$MQ_PASS
        ports:
            - $MQ_PORT:$MQ_PORT
            - $MQ_UI_PORT:$MQ_UI_PORT
        healthcheck:
            test: ["CMD", "rabbitmqctl", "status"]
            interval: 5s
            timeout: 40s
            retries: 5
        volumes:
            - "./data/broker:/var/lib/rabbitmq/mnesia"
        networks:
            - backend

    user-queue:
        container_name: user-queue
        restart: on-failure
        build:
            context: ./backend/user-queue
        env_file: ./.env
        ports:
            - $QUEUE_LOCAL_PORT:$QUEUE_DOCKER_PORT
        environment:
            - DB_HOST=mongodb
            - DB_WRITE_USER=$DB_WRITE_USER
            - DB_WRITE_PASS=$DB_WRITE_PASS
            - DB_NAME=$DB_NAME
            - DB_PORT=$DB_DOCKER_PORT
            - DEFAULT_USER=$DEFAULT_USER
            - MQ_HOST:$MQ_HOST
            - MQ_PORT:$MQ_PORT
            - QUEUE_DOCKER_PORT:$QUEUE_DOCKER_PORT
            - MQ_USER=$MQ_USER
            - MQ_PASS=$MQ_PASS
        depends_on:
            rabbitmq:
                condition: service_healthy
        networks:
            - backend

    user-api:
        container_name: user-api
        build:
            context: ./backend/user-api
        env_file: ./.env
        ports:
            - $API_LOCAL_PORT:$API_DOCKER_PORT
        environment:
            - DB_HOST=mongodb
            - DB_READ_USER=$DB_READ_USER
            - DB_READ_PASS=$DB_READ_PASS
            - DB_NAME=$DB_NAME
            - DB_PORT=$DB_DOCKER_PORT
            - REDIS_HOST=$REDIS_HOST
            - REDIS_PORT=$REDIS_PORT
        depends_on:
            - mongodb
            - user-cache
            - user-queue
        networks:
            - backend
            - frontend

    frontend:
        container_name: frontend
        build:
            context: ./frontend
            args:
                - API_BASE_URL=$CLIENT_API_BASE_URL
        ports:
            - $UI_LOCAL_PORT:$UI_DOCKER_PORT
        depends_on:
            - user-api
        networks:
            - frontend

volumes:
    db:
    cache:

networks:
    backend:
    frontend:
